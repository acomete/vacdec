#!/usr/bin/env python3

# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=python

import sys
import zlib
import argparse
import logging
import json
import base45
import cbor2
from cose.headers import KID
from cose.messages import CoseMessage

log = logging.getLogger(__name__)

DEFAULT_CERTIFICATE_DB_JSON = 'certs/roots/Digital_Green_Certificate_Signing_Keys.json'
DEFAULT_CERTIFICATE_DIRECTORY = 'certs'


def _setup_logger() -> None:
    log_formatter = logging.Formatter("%(asctime)s [%(levelname)-5.5s]  %(message)s")
    console_handler = logging.StreamHandler(sys.stderr)
    console_handler.setFormatter(log_formatter)
    console_handler.propagate = False
    logging.getLogger().addHandler(console_handler)
    log.setLevel(logging.DEBUG)
    # log.setLevel(logging.INFO)


def encode_cert_data(cert: str, keys_file: str) -> None:
    # Add the first characters
    encodedData = 'HC1:'

    b45data = cert[4:]

    # Decode the data
    zlibdata = base45.b45decode(b45data)

    # Uncompress the data
    decompressed = zlib.decompress(zlibdata)

    # decode COSE message (no signature verification done)
    cose_msg = CoseMessage.decode(decompressed)

    # decode the CBOR encoded payload and print as json
    log.debug(cose_msg.phdr)
    if KID in cose_msg.phdr:
        log.info("COVID certificate signed with X.509 certificate.")
        log.info("X.509 in DER form has SHA-256 beginning with: {0}".format(
            cose_msg.phdr[KID].hex()))
        key = find_key(cose_msg.phdr[KID], keys_file)
        if key:
            verify_signature(cose_msg, key)
        else:
            log.info("Skip verify as no key found from database")
    else:
        log.info("Certificate is not signed")
    # log.debug(cose_msg.uhdr)
    # log.debug(cose_msg.key)
    cbor = cbor2.loads(cose_msg.payload)
    # Note: Some countries have hour:minute:secod for sc-field (Date/Time of Sample Collection).
    # If used, this will decode as a datetime. A datetime cannot be JSON-serialized without hints (use str as default).
    # Note 2: Names may contain non-ASCII characters in UTF-8
    log.info("Certificate as JSON: {0}".format(json.dumps(cbor, indent=2, default=str, ensure_ascii=False)))


def main() -> None:
    parser = argparse.ArgumentParser(description='EU COVID Vaccination Passport Encoder')
    parser.add_argument('--data', metavar="JSON-DATA", help='JSON data to encode')

    args = parser.parse_args()
    _setup_logger()

    if args.json_data:
        data = args.json_data
    else:
        log.error("Input parameters: Need --data")
        exit(2)

    # Got the data, output
    log.debug("Cert data: '{0}'".format(data))
    encode_cert_data(data)


if __name__ == '__main__':
    main()
